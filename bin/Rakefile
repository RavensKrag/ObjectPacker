require 'rake'
require 'rake/clean'


require 'pathname'


path_to_file = File.expand_path(File.dirname(__FILE__))
Dir.chdir path_to_file do
	require './../lib/object-packer'
end





TEMPLATE_DIR = File.expand_path(
					File.join('.', '..', 'lib', 'object-packer', 'templates'), 
					File.dirname(__FILE__)
				)



source_dir = ENV['source_dir']
output_dir = ENV['output_dir']

puts "source: #{source_dir}"
puts "output: #{output_dir}"






# find all files with ruby extension in the source dir, and get only the file names
# (take the path off)
source_files = Dir[File.join(source_dir, '*.rb')].collect{|i| Pathname.new(i).basename.to_s}

# process filenames
filepaths = 
	source_files.collect do |filename|
		source = filename
		
		templates = ["pack.rb", "unpack.rb"] # TODO: just use every template in the template dir
		compiled_files = templates.collect{ |type| "#{filename.strip_extension}_#{type}" }
		
		
		templates.zip(compiled_files).collect do |template_name, complied_filename|
			input_filepath    = File.expand_path  source,            source_dir
			template_filepath = File.expand_path  template_name,     TEMPLATE_DIR
			output_filepath   = File.expand_path  complied_filename, output_dir
			
			
			
			
			[input_filepath, template_filepath, output_filepath]
		end
	end


# need to flatten one level
# without this, there's one extra level of nesting which is not desired
# (actually, this might always be n-2, where n is the number of fields)
filepaths.flatten!(1)










# list files that define and execute transforms
# build system needs to know about these files,
# because changing them means everything needs to be built again
build_files = [
	File.join('.', '..', 'lib', 'object-packer.rb'),
	File.join('.', '..', 'lib', 'object-packer', 'build_system', 'line_transforms.rb'),
	File.join('.', '..', 'lib', 'object-packer', 'build_system', 'document_transforms.rb'),
]
build_files.collect!{ |path|  File.expand_path(path, path_to_file) }




# make sure that the output directory exists
# go ahead and make it, if it has not yet been made
FileUtils.mkdir_p(output_dir) unless File.directory?(output_dir)
# TODO: try to use 'directory' from rake (functions like any other task, creates directories)



filepaths.each do |input_filepath, template_filepath, output_filepath|
	# ------------
	file output_filepath => [input_filepath, template_filepath] + build_files do
		ObjectPacker.process(input_filepath, template_filepath, output_filepath)
	end
	# ------------
end


ouputted_files = filepaths.collect{ |src, template, out|  out }
# --------
task :default => :build
task :build => ouputted_files
# --------
